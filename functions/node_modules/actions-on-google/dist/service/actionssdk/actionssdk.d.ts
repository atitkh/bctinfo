/**
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as Api from './api/v2';
import { ServiceBaseApp, AppOptions, AppHandler } from '../../assistant';
import { ExceptionHandler, Argument, Intent } from './conversation';
import { ActionsSdkConversation, ActionsSdkConversationOptionsInit } from './conv';
/** @public */
export interface ActionsSdkIntentHandler<TConvData, TUserStorage, TConversation extends ActionsSdkConversation<TConvData, TUserStorage>, TArgument extends Argument> {
    (conv: TConversation, input: string, argument: TArgument, status: Api.GoogleRpcStatus | undefined): Promise<any> | any;
}
export interface ActionSdkIntentHandlers {
    [intent: string]: ActionsSdkIntentHandler<{}, {}, ActionsSdkConversation<{}, {}>, string | Argument> | string | undefined;
}
export interface ActionsSdkHandlers<TConvData, TUserStorage, TConversation extends ActionsSdkConversation<TConvData, TUserStorage>> {
    intents: ActionSdkIntentHandlers;
    catcher: ExceptionHandler<TUserStorage, TConversation>;
    fallback?: ActionsSdkIntentHandler<{}, {}, ActionsSdkConversation<{}, {}>, string | Argument> | string;
}
/** @public */
export interface ActionsSdkMiddleware<TConversationPlugin extends ActionsSdkConversation<{}, {}>> {
    (conv: ActionsSdkConversation<{}, {}>): (ActionsSdkConversation<{}, {}> & TConversationPlugin) | void;
}
/** @public */
export interface ActionsSdkApp<TConvData, TUserStorage, TConversation extends ActionsSdkConversation<TConvData, TUserStorage>> extends ServiceBaseApp {
    handlers: ActionsSdkHandlers<TConvData, TUserStorage, TConversation>;
    /** @public */
    intent<TArgument extends Argument>(intent: Intent, handler: ActionsSdkIntentHandler<TConvData, TUserStorage, TConversation, TArgument> | Intent): this;
    /** @public */
    intent<TArgument extends Argument>(intent: string, handler: ActionsSdkIntentHandler<TConvData, TUserStorage, TConversation, TArgument> | string): this;
    /** @public */
    catch(catcher: ExceptionHandler<TUserStorage, TConversation>): this;
    /** @public */
    fallback(handler: ActionsSdkIntentHandler<TConvData, TUserStorage, TConversation, Argument> | string): this;
    middlewares: ActionsSdkMiddleware<ActionsSdkConversation<{}, {}>>[];
    /** @public */
    middleware<TConversationPlugin extends ActionsSdkConversation<{}, {}>>(middleware: ActionsSdkMiddleware<TConversationPlugin>): this;
    /** @public */
    init?: () => ActionsSdkConversationOptionsInit<TConvData, TUserStorage>;
    /** @public */
    verification?: ActionsSdkVerification | string;
}
/** @public */
export interface ActionsSdk {
    /** @public */
    <TConvData, TUserStorage, Conversation extends ActionsSdkConversation<TConvData, TUserStorage> = ActionsSdkConversation<TConvData, TUserStorage>>(options?: ActionsSdkOptions<TConvData, TUserStorage>): AppHandler & ActionsSdkApp<TConvData, TUserStorage, Conversation>;
    /** @public */
    <Conversation extends ActionsSdkConversation<{}, {}> = ActionsSdkConversation<{}, {}>>(options?: ActionsSdkOptions<{}, {}>): AppHandler & ActionsSdkApp<{}, {}, Conversation>;
}
/** @public */
export interface ActionsSdkVerification {
    /** @public */
    project: string;
    /** @public */
    status?: number;
    /** @public */
    error?: string | ((error: string) => string);
}
/** @public */
export interface ActionsSdkOptions<TConvData, TUserStorage> extends AppOptions {
    /** @public */
    init?: () => ActionsSdkConversationOptionsInit<TConvData, TUserStorage>;
    /** @public */
    verification?: ActionsSdkVerification | string;
}
/** @public */
export declare const actionssdk: ActionsSdk;
