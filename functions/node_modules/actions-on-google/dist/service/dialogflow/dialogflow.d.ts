import * as ActionsApi from '../actionssdk/api/v2';
import { ServiceBaseApp, AppOptions, AppHandler } from '../../assistant';
import { ExceptionHandler, Argument } from '../actionssdk';
import { Contexts, Parameters } from './context';
import { DialogflowConversation, DialogflowConversationOptionsInit } from './conv';
/** @public */
export interface DialogflowIntentHandler<TConvData, TUserStorage, TContexts extends Contexts, TConversation extends DialogflowConversation<TConvData, TUserStorage, TContexts>, TParameters extends Parameters, TArgument extends Argument> {
    (conv: TConversation, params: TParameters, argument: TArgument, status: ActionsApi.GoogleRpcStatus | undefined): Promise<any> | any;
}
export interface DialogflowIntentHandlers {
    [event: string]: DialogflowIntentHandler<Contexts, {}, {}, DialogflowConversation<{}, {}>, Parameters, Argument> | string | undefined;
}
export interface DialogflowHandlers<TConvData, TUserStorage, TContexts extends Contexts, TConversation extends DialogflowConversation<TConvData, TUserStorage, TContexts>> {
    intents: DialogflowIntentHandlers;
    catcher: ExceptionHandler<TUserStorage, TConversation>;
    fallback?: DialogflowIntentHandler<Contexts, {}, {}, DialogflowConversation<{}, {}>, Parameters, Argument> | string;
}
/** @public */
export interface DialogflowMiddleware<TConversationPlugin extends DialogflowConversation<{}, {}, Contexts>> {
    (conv: DialogflowConversation<{}, {}, Contexts>): (DialogflowConversation<{}, {}, Contexts> & TConversationPlugin) | void;
}
/** @public */
export interface DialogflowApp<TConvData, TUserStorage, TContexts extends Contexts, TConversation extends DialogflowConversation<TConvData, TUserStorage, TContexts>> extends ServiceBaseApp {
    handlers: DialogflowHandlers<TConvData, TUserStorage, TContexts, TConversation>;
    /** @public */
    intent<TParameters extends Parameters>(intent: string, handler: DialogflowIntentHandler<TConvData, TUserStorage, TContexts, TConversation, TParameters, Argument> | string): this;
    /** @public */
    intent<TArgument extends Argument>(intent: string, handler: DialogflowIntentHandler<TConvData, TUserStorage, TContexts, TConversation, Parameters, TArgument> | string): this;
    /** @public */
    intent<TParameters extends Parameters, TArgument extends Argument>(intent: string, handler: DialogflowIntentHandler<TConvData, TUserStorage, TContexts, TConversation, TParameters, TArgument> | string): this;
    /** @public */
    catch(catcher: ExceptionHandler<TUserStorage, TConversation>): this;
    /** @public */
    fallback(intent: string, handler: DialogflowIntentHandler<TConvData, TUserStorage, TContexts, TConversation, Parameters, Argument> | string): this;
    middlewares: DialogflowMiddleware<DialogflowConversation<{}, {}, Contexts>>[];
    /** @public */
    middleware<TConversationPlugin extends DialogflowConversation<{}, {}, Contexts>>(middleware: DialogflowMiddleware<TConversationPlugin>): this;
    /** @public */
    init?: () => DialogflowConversationOptionsInit<TConvData, TUserStorage>;
    /** @public */
    verification?: DialogflowVerification | DialogflowVerificationHeaders;
}
/** @public */
export interface DialogflowVerificationHeaders {
    /** @public */
    [key: string]: string;
}
/** @public */
export interface DialogflowVerification {
    /** @public */
    headers: DialogflowVerificationHeaders;
    /** @public */
    status?: number;
    /** @public */
    error?: string | ((error: string) => string);
}
/** @public */
export interface DialogflowOptions<TConvData, TUserStorage> extends AppOptions {
    /** @public */
    init?: () => DialogflowConversationOptionsInit<TConvData, TUserStorage>;
    /** @public */
    verification?: DialogflowVerification | DialogflowVerificationHeaders;
}
/** @public */
export interface Dialogflow {
    /** @public */
    <TConvData, TUserStorage, TContexts extends Contexts = Contexts, Conversation extends DialogflowConversation<TConvData, TUserStorage, TContexts> = DialogflowConversation<TConvData, TUserStorage, TContexts>>(options?: DialogflowOptions<TConvData, TUserStorage>): AppHandler & DialogflowApp<TConvData, TUserStorage, TContexts, Conversation>;
    /** @public */
    <TContexts extends Contexts, Conversation extends DialogflowConversation<{}, {}, TContexts> = DialogflowConversation<{}, {}, TContexts>>(options?: DialogflowOptions<{}, {}>): AppHandler & DialogflowApp<{}, {}, TContexts, Conversation>;
    /** @public */
    <TConversation extends DialogflowConversation<{}, {}> = DialogflowConversation<{}, {}>>(options?: DialogflowOptions<{}, {}>): AppHandler & DialogflowApp<{}, {}, Contexts, TConversation>;
}
/** @public */
export declare const dialogflow: Dialogflow;
